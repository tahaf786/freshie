# -*- coding: utf-8 -*-
"""stockpricepredictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GuAwuAWBLrds4fmKfC6sukuw5C5YtJF0
"""

import yfinance as yf

# Download historical data for a specific stock (e.g., Apple)
data = yf.download("AAPL", start="2020-01-01", end="2023-01-01")
print(data.head())

# Define the compute_rsi function (or import it if it exists in a library)
def compute_rsi(data, window=14):
  """
  Computes the Relative Strength Index (RSI) for a given price series.

  Args:
    data: A pandas Series containing the price data.
    window: The lookback period for calculating RSI (default is 14).

  Returns:
    A pandas Series containing the RSI values.
  """
  delta = data.diff()
  gain = (delta.where(delta > 0, 0)).fillna(0)
  loss = (-delta.where(delta < 0, 0)).fillna(0)
  avg_gain = gain.rolling(window=window, center=True).mean()
  avg_loss = loss.rolling(window=window, center=True).mean()
  rs = avg_gain / avg_loss
  rsi = 100 - (100 / (1 + rs))
  return rsi

# Calculate indicators
data['MA_7'] = data['Close'].rolling(window=7).mean()
data['Daily_Return'] = data['Close'].pct_change()
data['RSI'] = compute_rsi(data['Close'])

data['Target'] = (data['Close'].shift(-1) > data['Close']).astype(int)

data.dropna(inplace=True)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_features = scaler.fit_transform(data[['Open', 'High', 'Low', 'Close', 'Volume', 'MA_7', 'RSI']])

from sklearn.model_selection import train_test_split

X = data[['Open', 'High', 'Low', 'Close', 'Volume', 'MA_7', 'RSI']]
y = data['Target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

from sklearn.model_selection import GridSearchCV

param_grid = {'n_estimators': [50, 100, 200], 'max_depth': [None, 10, 20]}
grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=3)
grid_search.fit(X_train, y_train)
print("Best Parameters:", grid_search.best_params_)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, batch_size=32)

import streamlit as st
import yfinance as yf
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# Load model
model = RandomForestClassifier()
# Train model (add your training code here)

st.title("Stock Trend Prediction")
ticker = st.text_input("Enter Stock Ticker (e.g., AAPL):")

if ticker:
    data = yf.download(ticker, start="2020-01-01", end="2023-01-01")
    # Preprocess data and make predictions
    prediction = model.predict(data)
    st.write("Predicted Trend:", "Up" if prediction[-1] == 1 else "Down")